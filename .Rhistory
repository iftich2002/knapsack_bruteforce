write.dcf(list(Package = "Knapsack-bruteforce", Title = "Knapsack Project", Description = "To get the optimzed values and possible combination for maximum weight",
Version = "0.0", License = "", Author = "Iftikhar Ahmad <iftich2002@gmail.com>",
Maintainer = "Iftikhar Ahmad <iftich2002@gmail.com>",Encoding = "UTF-8", Roxygen = "list(markdown = TRUE)", RoxygenNote = "7.1.1"),
file = file.path("C:/Users/Iftikhar/Desktop/SU R Course/Assignment/Assignmet 4/knapsack_bruteforce", "DESCRIPTION"))
library(bruteforce)
bruteforce(x = knapsack_objects[1: 8,], W = 3500)
detach("package:bruteforce", unload = TRUE)
library(bruteforce)
bruteforce()
brute_force_knapsack(x = knapsack_objects[1: 8,], W = 3500)
brute_force_knapsack(x = knapsack_objects[1: 8,], W = 3500)
library(bruteforce)
brute_force_knapsack(x = knapsack_objects[1: 8,], W = 3500)
detach("package:bruteforce", unload = TRUE)
rm("bruteforce")
rm(bruteforce)
library(bruteforce)
brute_force_knapsack(x = knapsack_objects[1: 8,], W = 3500)
getAnywhere(plot.prcomp)
getAnywhere(bruteforce)
getAnywhere(bruteforce.)
library(bruteforce)
brute_force_knapsack(x = knapsack_objects[1: 8,], W = 3500)
?brute_force_knapsack
library(bruteforce)
brute_force_knapsack(x = knapsack_objects[1: 8,], W = 3500)
library(bruteforce)
??
brute_force_knapsack
??brute_force_knapsack
bruteforce::brute_force_knapsack(x = knapsack_objects[1: 8,], W = 3500)
bruteforce:::brute_force_knapsack(x = knapsack_objects[1: 8,], W = 3500)
set.seed(42)
n <- 2000
knapsack_objects <- data.frame(w = sample(1:4000, size = n, replace = TRUE),
v <- runif(n = n, 0, 10000))
bruteforce:::brute_force_knapsack(x = knapsack_objects[1: 8,], W = 3500)
brute_force_knapsack<-function(x, W){
##make the binary matrix of 2^n
bin_matrix<-as.matrix(expand.grid(replicate(nrow(x), 0:1, simplify = FALSE)))
##multiply weight and value by binary matrix and take sum
value_weight<-cbind(bin_matrix %*% x[,2],bin_matrix %*% x[,1])
##rename columns
colnames(value_weight)<-c("value","weight")
##combine value weight with binary
value_weight_bin<-cbind(bin_matrix,value_weight)
##selecting the rows which are less than the given weight and convert it to dataframe
value_weight_opt<-as.data.frame(value_weight_bin[value_weight_bin[,"weight"]<W,])
##row with maximum weight
weight_max<-filter(value_weight_opt, weight == max(weight))
elements<-which(weight_max==1)
result<-list(round(weight_max$value,0),elements)
names(result)<-c("Value","Elements")
return(result)
}
brute_force_knapsack(x = knapsack_objects[1: 8,], W = 3500)
brute_force_knapsack<-function(x, W){
##make the binary matrix of 2^n
bin_matrix<-as.matrix(expand.grid(replicate(nrow(x), 0:1, simplify = FALSE)))
##multiply weight and value by binary matrix and take sum
value_weight<-cbind(bin_matrix %*% x[,2],bin_matrix %*% x[,1])
##rename columns
colnames(value_weight)<-c("value","weight")
##combine value weight with binary
value_weight_bin<-cbind(bin_matrix,value_weight)
##selecting the rows which are less than the given weight and convert it to dataframe
value_weight_opt<-as.data.frame(value_weight_bin[value_weight_bin[,"weight"]<W,])
##row with maximum weight
weight_max<-filter(value_weight_opt, value_weight_opt$weight == max(value_weight_opt$weight))
elements<-which(weight_max==1)
result<-list(round(weight_max$value,0),elements)
names(result)<-c("Value","Elements")
return(result)
}
brute_force_knapsack(x = knapsack_objects[1: 8,], W = 3500)
x = knapsack_objects[1: 8,]
W = 3500
##make the binary matrix of 2^n
bin_matrix<-as.matrix(expand.grid(replicate(nrow(x), 0:1, simplify = FALSE)))
##multiply weight and value by binary matrix and take sum
value_weight<-cbind(bin_matrix %*% x[,2],bin_matrix %*% x[,1])
##rename columns
colnames(value_weight)<-c("value","weight")
##combine value weight with binary
value_weight_bin<-cbind(bin_matrix,value_weight)
##selecting the rows which are less than the given weight and convert it to dataframe
value_weight_opt<-as.data.frame(value_weight_bin[value_weight_bin[,"weight"]<W,])
##row with maximum weight
weight_max<-filter(value_weight_opt, weight == max(weight))
##make the binary matrix of 2^n
bin_matrix<-as.matrix(expand.grid(replicate(nrow(x), 0:1, simplify = FALSE)))
##multiply weight and value by binary matrix and take sum
value_weight<-cbind(bin_matrix %*% x[,2],bin_matrix %*% x[,1])
##rename columns
colnames(value_weight)<-c("value","weight")
##combine value weight with binary
value_weight_bin<-cbind(bin_matrix,value_weight)
##selecting the rows which are less than the given weight and convert it to dataframe
value_weight_opt<-as.data.frame(value_weight_bin[value_weight_bin[,"weight"]<W,])
##row with maximum weight
value_weight_opt
value_weight_opt$weight
weight_max<-filter(value_weight_opt, weight == max(value_weight_opt$weight))
value_weight_opt
value_weight_opt
weight_max<-filter(value_weight_opt, weight == max(value_weight_opt$weight))
library(dplyr)
weight_max<-filter(value_weight_opt, weight == max(value_weight_opt$weight))
library(bruteforce)
brute_force_knapsack(x = knapsack_objects[1: 8,], W = 3500)
